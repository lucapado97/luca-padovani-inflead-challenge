using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Challenge.LocalDbContext
{
    public class SQLiteDbContextOptions<TContext> where TContext : DbContext
    {
        public DbContextOptionsBuilder<TContext> DbContextOptions { get; internal set; } = new();
    }

    #region Database context interface

    public interface ISQLiteDbContext : IDisposable
    {
        DbSet<User> Users { get; set; }
        DbSet<Address> Addresses { get; set; }
        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string? ToString();
    }

    #endregion

    #region Database context

    public partial class SQLiteDbContext : DbContext, ISQLiteDbContext
    {
        public SQLiteDbContext()
        {
            Database.EnsureCreated();
        }

        public SQLiteDbContext(DbContextOptions<SQLiteDbContext> options)
            : base(options)
        {
            this.Database.EnsureCreated();
        }

        public DbSet<User> Users { get; set; }
        public DbSet<Address> Addresses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new AddressConfiguration());
        }

        public async Task AddUser(User u, Address a)
        {
            await Users.AddAsync(u);
            await Addresses.AddAsync(a);
            await SaveChangesAsync();
        }
    }

    #endregion

    #region POCO classes
    public partial class User
    {
        [Key]
        [Required]
        [Display(Name = "Id")]
        [MaxLength(36)]
        [StringLength(36)]
        public string Id { get; set; } = string.Empty;                  // map from Uid
        [MaxLength(100)]
        [StringLength(100)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Username")]
        public string Username { get; set; } = string.Empty;
        [MaxLength(100)]
        [StringLength(100)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "FullName")]
        public string FullName { get; set; } = string.Empty;       // name + surname
        [MaxLength(500)]
        [StringLength(500)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "ProfilePicUrl")]
        public string ProfilePicUrl { get; set; } = string.Empty;
        [MaxLength(5)]
        [StringLength(5)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Gender")]
        public string Gender { get; set; } = string.Empty;
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "PhoneNumber")]
        public string PhoneNumber { get; set; } = string.Empty;
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Employment")]
        public string Employment { get; set; } = string.Empty;
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "KeySkill")]
        public string KeySkill { get; set; } = string.Empty;
        [MaxLength(36)]
        [StringLength(36)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "AddressId")]
        public string AddressId { get; set; } = string.Empty;
        [Display(Name = "CreationDate")]
        public DateTime CreationDate { get; set; } 		//DB entry date
    }

    public partial class Address
    {
        [Key]
        [Required]
        [Display(Name = "Id")]
        [MaxLength(36)]
        [StringLength(36)]
        public string Id { get; set; } = string.Empty;               // autogenerated
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "City")]
        public string City { get; set; } = string.Empty;
        [MaxLength(100)]
        [StringLength(100)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Street")]
        public string Street { get; set; } = string.Empty;          // name + address
        [MaxLength(10)]
        [StringLength(10)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "ZipCode")]
        public string ZipCode { get; set; } = string.Empty;
        [MaxLength(50)]
        [StringLength(50)]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "State")]
        public string State { get; set; } = string.Empty;
        [Display(Name = "CreationDate")]
        public DateTime CreationDate { get; set; } 		//DB entry date
    }
    #endregion

    #region POCO Configuration

    // Customers
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("User");
            builder.HasKey(x => new { x.Id });
            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("TEXT").IsRequired().HasMaxLength(36);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("TEXT").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Username).HasColumnName(@"Username").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("TEXT").IsRequired().HasMaxLength(100);
            builder.Property(x => x.ProfilePicUrl).HasColumnName(@"ProfilePicUrl").HasColumnType("TEXT").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("TEXT").IsRequired().HasMaxLength(5);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Employment).HasColumnName(@"Employment").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.KeySkill).HasColumnName(@"KeySkill").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.AddressId).HasColumnName(@"AddressId").HasColumnType("TEXT").IsRequired().HasMaxLength(36);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("TEXT").HasDefaultValue(DateTime.Now);
        }
    }

    public class AddressConfiguration : IEntityTypeConfiguration<Address>
    {
        public void Configure(EntityTypeBuilder<Address> builder)
        {
            builder.ToTable("Address");
            builder.HasKey(x => new { x.Id });
            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("TEXT").IsRequired().HasMaxLength(36);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Street).HasColumnName(@"Street").HasColumnType("TEXT").IsRequired().HasMaxLength(100);
            builder.Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType("TEXT").IsRequired().HasMaxLength(10);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("TEXT").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("TEXT").HasDefaultValue(DateTime.Now);
        }
    }
    #endregion
}
